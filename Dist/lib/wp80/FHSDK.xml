<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FHSDK</name>
    </assembly>
    <members>
        <member name="T:FHSDK.FHException">
            <summary>
            The exception that is thrown by FH API calls
            </summary>
        </member>
        <member name="M:FHSDK.FHException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:FHSDK.FHException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:FHSDK.FHException.#ctor(System.String,FHSDK.FHException.ErrorCode)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:FHSDK.FHException.#ctor(System.String,FHSDK.FHException.ErrorCode,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
            <param name="baseException"></param>
        </member>
        <member name="P:FHSDK.FHException.Error">
            <summary>
            Get the error code
            </summary>
        </member>
        <member name="T:FHSDK.FHException.ErrorCode">
            <summary>
            Possible error codes
            </summary>
        </member>
        <member name="F:FHSDK.FHException.ErrorCode.UnknownError">
            <summary>
            This error code means the error is unknown
            </summary>
        </member>
        <member name="F:FHSDK.FHException.ErrorCode.NetworkError">
            <summary>
            This error code means the device is offline
            </summary>
        </member>
        <member name="F:FHSDK.FHException.ErrorCode.HttpError">
            <summary>
            This error code means http exception is thrown by the http client
            </summary>
        </member>
        <member name="F:FHSDK.FHException.ErrorCode.ServerError">
            <summary>
            This error code means the server returns error 
            </summary>
        </member>
        <member name="F:FHSDK.FHException.ErrorCode.AuthenticationError">
            <summary>
            This error code means authentication failed
            </summary>
        </member>
        <member name="F:FHSDK.FHException.ErrorCode.Cancelled">
            <summary>
            User cancelled
            </summary>
        </member>
        <member name="T:FHSDK.FHHttpClient.NamespaceDoc">
            <summary>
            Contains implementation of a HttpClient used by the FeedHenry .Net SDK. Defined in the FHSDK.dll assembly.
            </summary>
        </member>
        <member name="T:FHSDK.FHHttpClient.FHHttpClient">
            <summary>
            HttpClient used by the SDK
            </summary>
        </member>
        <member name="M:FHSDK.FHHttpClient.FHHttpClient.IsOnlineAsync">
            <summary>
            Check if the device is online
            </summary>
            <returns></returns>
        </member>
        <member name="M:FHSDK.FHHttpClient.FHHttpClient.SendAsync(System.Uri,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
            <summary>
            Send request to the remote uri
            </summary>
            <param name="uri">The remote uri</param>
            <param name="requestMethod">The http request method</param>
            <param name="headers">The http reqeust headers</param>
            <param name="requestData">The request data</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns>Server response</returns>
        </member>
        <member name="T:FHSDK.FHResponse">
            <summary>
            Represents a response from a request to the FeedHenry cloud.
            </summary>
        </member>
        <member name="M:FHSDK.FHResponse.#ctor(System.Net.HttpStatusCode,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="statusCode">Http status code</param>
            <param name="rawResponse">the response body</param>
        </member>
        <member name="M:FHSDK.FHResponse.#ctor(System.Net.HttpStatusCode,System.String,FHSDK.FHException)">
            <summary>
            Constructor
            </summary>
            <param name="statusCode">The http status code</param>
            <param name="rawResponse">The http response body</param>
            <param name="error">An error</param>
        </member>
        <member name="M:FHSDK.FHResponse.#ctor(System.String,FHSDK.FHException)">
            <summary>
            Constructor
            </summary>
            <param name="rawResponse">The http response body</param>
            <param name="error">An error</param>
        </member>
        <member name="M:FHSDK.FHResponse.#ctor(FHSDK.FHException)">
            <summary>
            Constructor
            </summary>
            <param name="error">An error</param>
        </member>
        <member name="M:FHSDK.FHResponse.GetResponseAsJObject">
            <summary>
            Get the response data as JSON object
            </summary>
            <returns></returns>
        </member>
        <member name="M:FHSDK.FHResponse.GetResponseAsJArray">
            <summary>
            Get the response data as JSON array
            </summary>
            <returns></returns>
        </member>
        <member name="M:FHSDK.FHResponse.GetResponseAsDictionary">
            <summary>
            Get the response data as a dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="P:FHSDK.FHResponse.StatusCode">
            <summary>
            Get the status code of the response
            </summary>
        </member>
        <member name="P:FHSDK.FHResponse.RawResponse">
            <summary>
            Get the raw response data
            </summary>
        </member>
        <member name="P:FHSDK.FHResponse.Error">
            <summary>
            Get the response error. Should be null if the request is successful.
            </summary>
        </member>
        <member name="T:FHSDK.Services.NamespaceDoc">
            <summary>
            Contains implementations of a few services used by the FeedHenry .Net SDK. The interfaces are defined in the FHSDK.dll assemably, then each platform's 
            assembly contains platform-specific implementations of these services.
            </summary>
        </member>
        <member name="T:FHSDK.Services.ServiceFinder">
            <summary>
            A helper class to resolve the correct implementation if a type using IAdapterResolver
            </summary>
        </member>
        <member name="M:FHSDK.Services.ServiceFinder.Resolve``1">
            <summary>
            Resolve the correct implementation for the type
            </summary>
            <typeparam name="T"></typeparam>
            <returns>an instance of the correct implementation class</returns>
        </member>
        <member name="T:FHSDK.NamespaceDoc">
            <summary>
            The parent name space defined by FeedHenry .Net SDK. It is defined inside the FHSDK.dll assembly, which is a Portable Class Library.
            The FHSDK.dll assembly can be referenced by other PCL projects.
            </summary>
        </member>
        <member name="T:FHSDK.FH">
            <summary>
            This is the main FeedHenry SDK class
            </summary>
        </member>
        <member name="M:FHSDK.FH.Init">
            <summary>
            The actual implementation of initialising the FeedHenry SDK. It is called when the Init method of each platform's FHClient class called in. 
            This way it will guarantee the platform's specific assembly will be loaded so that the ServiceFinder can find the correct implmenetation for some of the services.
            (The Adaptation approach used here works for wp and xamarain android without the FHClient reference. However, due to Xamarain IOS is using AOT compiler, we have to reference the FHClient class of the IOS SDK to make sure it will be loaded during compile.)
            </summary>
            <returns>If Init is success or not</returns>
            <exception cref="T:FHSDK.FHException"></exception>
        </member>
        <member name="M:FHSDK.FH.Act(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Invoke a cloud function which you have defined in cloud/main.js (the old way).
            </summary>
            <param name="remoteAct">The name of the cloud function name</param>
            <param name="actParams">The parameters passed to the cloud function</param>
            <example>
            <code>
            string cloudFunc = "test";
            IDictionary&lt;string, object&gt; dict = new Dictionary&lt;string, object&gt;();
            dict.Add("data", "test");
            FHResponse response = await FH.Act(cloudFunc, dict);
            if(null == response.Error)
            {
              //no error occured, the request is successful
              string rawResponseData = response.RawResponse;
              //you can get it as JSONObject (require Json.Net library)
              JObject resJson = response.GetResponseAsJObject();
              //process response data
            }
            else
            {
              //error occured during the request, deal with it.
              //More infomation can be access from response.Error.InnerException
            }
            </code>
            </example>
            <returns>The response data returned by the cloud function</returns>
            <exception cref="T:System.InvalidOperationException"> It will be thrown if FH SDK is not ready.</exception>
        </member>
        <member name="M:FHSDK.FH.Auth(System.String)">
            <summary>
            Call the FeedHenry Authentication API with the given policyId. This is normally used for OAuth type authentications. 
            The user will be prompted for login details and the the login result will be returned.
            </summary>
            <param name="policyId">The id of the new policy</param>
            <returns>The result of the authencation</returns>
        </member>
        <member name="M:FHSDK.FH.Auth(System.String,System.String,System.String)">
            <summary>
             Call the FeedHenry Authentication API with the given policyId, user name and password. This is normally used for LDAP and other basic authentication types.
            </summary>
            <param name="policyId">The id of the auth policy</param>
            <param name="userName">The name of the user</param>
            <param name="userPassword">The user's password</param>
            <returns>The result of the authencation</returns>
        </member>
        <member name="M:FHSDK.FH.GetCloudRequest(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Build the cloud request to call the app's cloud functions.
            </summary>
            <param name="path">The path of the cloud request</param>
            <param name="requestMethod">The request method</param>
            <param name="headers">The HTTP headers for the request</param>
            <param name="requestParams">The request body (will be covert to query parameters for certain request methods)</param>
            <returns>The cloud request object</returns>
        </member>
        <member name="M:FHSDK.FH.Cloud(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a cloud request and execute it immediately.
            </summary>
            <param name="path">The path of the cloud request</param>
            <param name="requestMethod">The reqeust method</param>
            <param name="headers">The HTTP headers of the reqeust</param>
            <param name="requestParams">The request body (will be covert to query parameters for certain request methods)</param>
            <example>
            <code>
            FHResponse response = await FH.Cloud("api/echo", "GET", null, null);
            if(null == response.Error)
            {
              //no error occured, the request is successful
              string rawResponseData = response.RawResponse;
              //you can get it as JSONObject (require Json.Net library)
              JObject resJson = response.GetResponseAsJObject();
              //process response data
            }
            else
            {
              //error occured during the request, deal with it.
              //More infomation can be access from response.Error.InnerException
            }
            </code>
            </example>
            <returns>The response from the cloud</returns>
        </member>
        <member name="M:FHSDK.FH.Mbaas(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Invoke a FeedHenry MBAAS Service function
            </summary>
            <param name="service">The MBAAS service name</param>
            <param name="requestParams">The request body</param>
            <returns>The response from the MBAAS service</returns>
        </member>
        <member name="M:FHSDK.FH.GetCloudHost">
            <summary>
            Get the cloud host to use with your own choice of HTTP clients.
            </summary>
            <returns>The cloud host URL</returns>
        </member>
        <member name="M:FHSDK.FH.GetDefaultParams">
            <summary>
            If you decide to use own choice of HTTP client and want to use the built-in analytics function of FeedHenry cloud,
            you need to add the returnd object as part of the request body with the key "__fh".
            </summary>
            <returns>The default request parameters</returns>
        </member>
        <member name="M:FHSDK.FH.GetDefaultParamsAsHeaders">
            <summary>
            If you decide to use own choice of HTTP client and want to use the built-in analytics function of FeedHenry cloud,
            you need to add the returned object as HTTP headers to each cloud request.
            </summary>
            <returns>The default HTTP request headers</returns>
        </member>
        <member name="M:FHSDK.FH.SetLogLevel(System.Int32)">
            <summary>
            Set the log levels. 
            VERBOSE=1
            DEBUG=2
            INFO=3
            WARNING=4
            ERROR=5
            NONE=Int16.MaxValue
            </summary>
            <param name="level">One of the options above</param>
        </member>
        <member name="M:FHSDK.FH.SaveInitInfo(System.String)">
            <summary>
            Save app init info. Mainly used for analytics.
            </summary>
            <param name="initInfo"></param>
        </member>
        <member name="M:FHSDK.FH.GetInitInfo">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="P:FHSDK.FH.SDK_VERSION">
            <summary>
            Get the current version of the FeedHenry .NET SDk
            </summary>
        </member>
        <member name="P:FHSDK.FH.TimeOut">
            <summary>
            Get or Set the timeout value for all the requests. Default is 30 seconds.
            </summary>
        </member>
        <member name="T:FHSDK.Services.IDataService">
            <summary>
            A service inferface that provides key/value pair data saving and retriving.
            </summary>
        </member>
        <member name="M:FHSDK.Services.IDataService.SaveData(System.String,System.String)">
            <summary>
            Save the data value associated with the data id
            </summary>
            <param name="dataId">the key</param>
            <param name="dataValue">the value</param>
        </member>
        <member name="M:FHSDK.Services.IDataService.GetData(System.String)">
            <summary>
            Retrieve the data value associated with the data id
            </summary>
            <param name="dataId">key</param>
            <returns>value</returns>
        </member>
        <member name="T:FHSDK.Services.IDeviceService">
            <summary>
            A service interface provides information about the device
            </summary>
        </member>
        <member name="M:FHSDK.Services.IDeviceService.GetDeviceId">
            <summary>
            Return the unique id of the device
            </summary>
            <returns>the unique device id</returns>
        </member>
        <member name="M:FHSDK.Services.IDeviceService.ReadAppProps">
            <summary>
            Return the FeedHenry app configurations
            </summary>
            <returns>the FeedHenry app configurations </returns>
        </member>
        <member name="M:FHSDK.Services.IDeviceService.GetDeviceDestination">
            <summary>
            Get the device type. E.g. iphone, android, windowsphone8
            </summary>
            <returns>the device type</returns>
        </member>
        <member name="T:FHSDK.Services.ILogService">
            <summary>
            A service interface provides logging
            </summary>
        </member>
        <member name="M:FHSDK.Services.ILogService.SetLogLevel(System.Int32)">
            <summary>
            Set the log level
            </summary>
            <param name="logLevel">log level</param>
        </member>
        <member name="M:FHSDK.Services.ILogService.v(System.String,System.String,System.Exception)">
            <summary>
            Do verbose logging
            </summary>
            <param name="tag">log tag</param>
            <param name="message">log message</param>
            <param name="e">exception</param>
        </member>
        <member name="M:FHSDK.Services.ILogService.d(System.String,System.String,System.Exception)">
            <summary>
            Do debug logging
            </summary>
            <param name="tag">log tag</param>
            <param name="message">log message</param>
            <param name="e">exception</param>
        </member>
        <member name="M:FHSDK.Services.ILogService.i(System.String,System.String,System.Exception)">
            <summary>
            Do info logging
            </summary>
            <param name="tag">log tag</param>
            <param name="message">log message</param>
            <param name="e">exception</param>
        </member>
        <member name="M:FHSDK.Services.ILogService.w(System.String,System.String,System.Exception)">
            <summary>
            Do warning logging
            </summary>
            <param name="tag">log tag</param>
            <param name="message">log message</param>
            <param name="e">exception</param>
        </member>
        <member name="M:FHSDK.Services.ILogService.e(System.String,System.String,System.Exception)">
            <summary>
            Do error logging
            </summary>
            <param name="tag">log tag</param>
            <param name="message">log message</param>
            <param name="e">exception</param>
        </member>
        <member name="T:FHSDK.Services.INetworkService">
            <summary>
            A service interface to provide the network information of the device
            </summary>
        </member>
        <member name="M:FHSDK.Services.INetworkService.IsOnlineAsync">
            <summary>
            Check if the device is online
            </summary>
            <returns>if the device is online</returns>
        </member>
        <member name="T:FHSDK.Services.IOAuthClientHandlerService">
            <summary>
            Class to handle oAuth logins given the oauth login url
            </summary>
        </member>
        <member name="T:FHSDK.Services.OAuthResult">
            <summary>
            Class represents the result of the OAuth login
            </summary>
        </member>
        <member name="M:FHSDK.Services.OAuthResult.#ctor(FHSDK.Services.OAuthResult.ResultCode)">
            <summary>
            Constructor
            </summary>
            <param name="result">the result code</param>
        </member>
        <member name="M:FHSDK.Services.OAuthResult.#ctor(FHSDK.Services.OAuthResult.ResultCode,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="result">the result code</param>
            <param name="exception">the error exception</param>
        </member>
        <member name="M:FHSDK.Services.OAuthResult.#ctor(FHSDK.Services.OAuthResult.ResultCode,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="result">the result code</param>
            <param name="sessionToken">the session token</param>
            <param name="authResponse">the acutal OAuth response</param>
        </member>
        <member name="M:FHSDK.Services.OAuthResult.ToString">
            <summary>
            Return the string representation of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:FHSDK.Services.OAuthResult.Result">
            <summary>
            Get the result code
            </summary>
        </member>
        <member name="P:FHSDK.Services.OAuthResult.SessionToken">
            <summary>
            Get the sessionToken
            </summary>
        </member>
        <member name="P:FHSDK.Services.OAuthResult.AuthResponse">
            <summary>
            Get the acutal OAuth response
            </summary>
        </member>
        <member name="P:FHSDK.Services.OAuthResult.Error">
            <summary>
            Get the error message if failed.
            </summary>
        </member>
        <member name="T:FHSDK.Adaptation.IAdapterResolver">
            <summary>
            An interface to resolve the correct implmentation of a type
            </summary>
        </member>
        <member name="M:FHSDK.Adaptation.ProbingAdapterResolver.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="platformNames"> the names of the assemblies to look for the implementations</param>
        </member>
        <member name="M:FHSDK.Adaptation.ProbingAdapterResolver.Resolve(System.Type)">
            <summary>
            Return the implementation of a type
            </summary>
            <param name="type">the interface</param>
            <returns>The correctly implementation instance of the type</returns>
        </member>
        <member name="T:FHSDK.API.FHInitRequest">
            <summary>
            Class represents init requests
            </summary>
        </member>
        <member name="T:FHSDK.API.FHRequest">
            <summary>
            Base class for all the API requests
            </summary>
        </member>
        <member name="F:FHSDK.API.FHRequest.timeout">
            <summary>
            The app configurations
            </summary>
        </member>
        <member name="M:FHSDK.API.FHRequest.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:FHSDK.API.FHRequest.execAsync">
            <summary>
            Execute the request asynchronously
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="M:FHSDK.API.FHRequest.GetDefaultParams">
            <summary>
            Get the default request parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:FHSDK.API.FHRequest.GetUri">
            <summary>
            Construct the remote uri based on the request type
            </summary>
            <returns></returns>
        </member>
        <member name="M:FHSDK.API.FHRequest.GetRequestParams">
            <summary>
            Construct the request data based on the request type
            </summary>
            <returns></returns>
        </member>
        <member name="P:FHSDK.API.FHRequest.TimeOut">
            <summary>
            Get or set the timeout value
            </summary>
        </member>
        <member name="P:FHSDK.API.FHRequest.RequestMethod">
            <summary>
            Get or set the http request method
            </summary>
        </member>
        <member name="P:FHSDK.API.FHRequest.RequestHeaders">
            <summary>
            Get or set the http request headers
            </summary>
        </member>
        <member name="M:FHSDK.API.FHInitRequest.#ctor">
            <summary>
            Constructor
            </summary>
            <param name="appProps"></param>
        </member>
        <member name="M:FHSDK.API.FHInitRequest.GetUri">
            <summary>
            Construct the remote uri based on the request type
            </summary>
            <returns></returns>
        </member>
        <member name="M:FHSDK.API.FHInitRequest.GetRequestParams">
            <summary>
            Construct the request data based on the request type
            </summary>
            <returns></returns>
        </member>
        <member name="T:FHSDK.API.FHActRequest">
            <summary>
            Class represents act requests
            </summary>
        </member>
        <member name="M:FHSDK.API.FHActRequest.#ctor(FHSDK.CloudProps)">
            <summary>
            Constructor
            </summary>
            <param name="cloudProps"></param>
        </member>
        <member name="M:FHSDK.API.FHActRequest.execAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Execute the act request asynchronously
            </summary>
            <param name="remoteAct">The name of the cloud action</param>
            <param name="requestParams">The request parameters</param>
            <returns></returns>
        </member>
        <member name="M:FHSDK.API.FHActRequest.GetUri">
            <summary>
            Construct the remote uri based on the request type
            </summary>
            <returns></returns>
        </member>
        <member name="M:FHSDK.API.FHActRequest.GetRequestParams">
            <summary>
            Construct the request data based on the request type
            </summary>
            <returns></returns>
        </member>
        <member name="P:FHSDK.API.FHActRequest.RemoteAct">
            <summary>
            Get or set the remote cloud function name
            </summary>
        </member>
        <member name="P:FHSDK.API.FHActRequest.RequestParams">
            <summary>
            Get or set the request parameters
            </summary>
        </member>
        <member name="T:FHSDK.API.FHAuthRequest">
            <summary>
            Class represents an authentication API request
            </summary>
        </member>
        <member name="M:FHSDK.API.FHAuthRequest.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:FHSDK.API.FHAuthRequest.SetAuthPolicyId(System.String)">
            <summary>
            Set the policy id for the request
            </summary>
            <param name="authPolicy">the auth policy id</param>
        </member>
        <member name="M:FHSDK.API.FHAuthRequest.SetAuthUser(System.String,System.String,System.String)">
            <summary>
            Set the policy id and user credentials for the request
            </summary>
            <param name="authPolicy">the auth policy id</param>
            <param name="authUserName">the auth user name</param>
            <param name="authPassword">the auth user password</param>
        </member>
        <member name="M:FHSDK.API.FHAuthRequest.SetOAuthHandler(FHSDK.Services.IOAuthClientHandlerService)">
            <summary>
            Set the OAuth handler. The auth API will return a URL to redirect users to login for OAuth type authentications.
            The handler need to implement the function to allow user to login and return the authentication info at the end.
            </summary>
            <param name="oauthHandler">the handler for OAuth login</param>
        </member>
        <member name="M:FHSDK.API.FHAuthRequest.GetUri">
            <summary>
            Construct the remote uri based on the request type
            </summary>
            <returns></returns>
        </member>
        <member name="M:FHSDK.API.FHAuthRequest.GetRequestParams">
            <summary>
            Construct the request data based on the request type
            </summary>
            <returns></returns>
        </member>
        <member name="M:FHSDK.API.FHAuthRequest.execAsync">
            <summary>
            Execute the authentication request. If the authencation type is OAuth and an OAuthHandler is set, it will be called automatically to redirect users to login.
            </summary>
            <returns>the authentication details</returns>
        </member>
        <member name="T:FHSDK.API.NamespaceDoc">
            <summary>
            Contains implementations for accessing FeedHenry APIs. Defined in the FHSDK.dll.
            </summary>
        </member>
        <member name="T:FHSDK.FHConfig">
            <summary>
            Singleton class to return various configurations of the app.
            </summary>
        </member>
        <member name="M:FHSDK.FHConfig.getInstance">
            <summary>
            Return the singleton instance of the class
            </summary>
            <returns></returns>
        </member>
        <member name="M:FHSDK.FHConfig.GetHost">
            <summary>
            Get the app's hosting server
            </summary>
            <returns>the host of the app</returns>
        </member>
        <member name="M:FHSDK.FHConfig.GetAppId">
            <summary>
            Get the app id
            </summary>
            <returns>app id</returns>
        </member>
        <member name="M:FHSDK.FHConfig.GetAppKey">
            <summary>
            Get the app key
            </summary>
            <returns>app key</returns>
        </member>
        <member name="M:FHSDK.FHConfig.GetProjectId">
            <summary>
            Get the project id
            </summary>
            <returns>project id</returns>
        </member>
        <member name="M:FHSDK.FHConfig.GetMode">
            <summary>
            Get the mode of the app. Deprecated.
            </summary>
            <returns>app mode</returns>
        </member>
        <member name="M:FHSDK.FHConfig.GetConnectionTag">
            <summary>
            Get the connection tag of the app
            </summary>
            <returns>the connection tag</returns>
        </member>
        <member name="M:FHSDK.FHConfig.GetDestination">
            <summary>
            Get the device type the app is running on.
            </summary>
            <returns>device type. E.g ios, android , windowsphone</returns>
        </member>
        <member name="M:FHSDK.FHConfig.GetDeviceId">
            <summary>
            Get the unique device id.
            </summary>
            <returns>the unique device id</returns>
        </member>
        <member name="T:FHSDK.AppProps">
            <summary>
            Describe the app configuration options specified in the FeedHenry config file.
            </summary>
        </member>
        <member name="P:FHSDK.AppProps.host">
            <summary>
            Get or Set the app host
            </summary>
        </member>
        <member name="P:FHSDK.AppProps.projectid">
            <summary>
            Get or set the project id
            </summary>
        </member>
        <member name="P:FHSDK.AppProps.appid">
            <summary>
            Get or set the appid
            </summary>
        </member>
        <member name="P:FHSDK.AppProps.appkey">
            <summary>
            Get or set the app API key
            </summary>
        </member>
        <member name="P:FHSDK.AppProps.connectiontag">
            <summary>
            Get or set the connection tag.
            </summary>
        </member>
        <member name="P:FHSDK.AppProps.mode">
            <summary>
            Get or set the app mode. Deprecated.
            </summary>
        </member>
        <member name="T:FHSDK.CloudProps">
            <summary>
            Class represents the cloud app instance (MBAAS service) the app should be communication with.
            </summary>
        </member>
        <member name="M:FHSDK.CloudProps.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Constructor
            </summary>
            <param name="props">The json format of the cloud host info</param>
        </member>
        <member name="M:FHSDK.CloudProps.GetCloudHost">
            <summary>
            Return the cloud host info as URL
            </summary>
            <returns>the cloud host url</returns>
        </member>
        <member name="T:FHSDK.FHCloudRequest">
            <summary>
            Class represents cloud requests.
            </summary>
        </member>
        <member name="M:FHSDK.FHCloudRequest.#ctor(FHSDK.CloudProps)">
            <summary>
            Constructor
            </summary>
            <param name="props">The cloud host info</param>
        </member>
        <member name="M:FHSDK.FHCloudRequest.GetUri">
            <summary>
            Construct the remote uri based on the request type
            </summary>
            <returns></returns>
        </member>
        <member name="M:FHSDK.FHCloudRequest.GetRequestParams">
            <summary>
            Construct the request data based on the request type
            </summary>
            <returns></returns>
        </member>
        <member name="P:FHSDK.FHCloudRequest.RequestParams">
            <summary>
            Get or set the request parameters
            </summary>
        </member>
        <member name="P:FHSDK.FHCloudRequest.RequestPath">
            <summary>
            Get or set the path of the cloud request
            </summary>
        </member>
        <member name="T:FHSDK.FHHttpClient.FHHttpClientFactory">
            <summary>
            Create a new instance of HttpClient using the default implementation. 
            You can override this functin to return your own instance of HttpClient.
            </summary>
        </member>
    </members>
</doc>
